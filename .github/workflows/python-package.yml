name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest flake8 black
    
    - name: Lint with flake8
      run: |
        flake8 codemood --max-line-length=88 --ignore=E203,W503
    
    - name: Format check with black
      run: |
        black --check codemood
    
    - name: Test with pytest
      run: |
        pytest tests/ -v

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  release:
    needs: publish
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: echo "version=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)" >> $GITHUB_OUTPUT
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create v${{ steps.version.outputs.version }} \
          --title "Release v${{ steps.version.outputs.version }}" \
          --notes "## What's Changed
        
        Auto-generated release for version ${{ steps.version.outputs.version }}
        
        ### Installation
        \`\`\`bash
        pip install codemood==${{ steps.version.outputs.version }}
        \`\`\`
        
        See [CHANGELOG.md](CHANGELOG.md) for detailed changes."
